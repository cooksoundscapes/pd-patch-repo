#N canvas 736 435 450 300 12;
#N canvas 364 317 545 673 fft-analysis 1;
#X obj 92 534 *~;
#X obj 53 534 *~;
#X obj 330 325 *~;
#X obj 298 325 *~;
#X obj 298 351 +~;
#X obj 53 176 *~;
#X obj 53 151 inlet~;
#X obj 53 199 rfft~;
#X obj 53 603 *~;
#X obj 144 238 *~;
#X obj 298 297 rfft~;
#X obj 53 568 rifft~;
#X obj 53 636 outlet~;
#X obj 110 238 *~;
#X obj 110 261 +~;
#X text 379 355 modulus;
#X obj 110 443 *~;
#X obj 357 459 block~ 1024 4;
#X obj 110 391 clip~;
#X obj 86 177 tabreceive~ \$0-hann;
#X obj 356 499 loadbang;
#X obj 142 365 expr 0.01*$f1*$f1;
#X obj 110 287 +~ 1e-20;
#X obj 110 503 *~ 0.00065;
#X obj 86 603 tabreceive~ \$0-hann;
#X obj 298 268 *~;
#X obj 298 239 inlet~;
#X obj 331 269 tabreceive~ \$0-hann;
#X text 379 372 of control;
#X text 377 389 amplitude;
#X text 187 242 reciprocal;
#X text 190 261 modulus of;
#X text 186 281 filter input;
#X text 187 300 amplitude;
#X text 114 152 filter input;
#X text 363 239 control source;
#X text 360 296 Fourier transform;
#X text 43 19 Internal workings of the timbre stamping algorithm. First the "filter input" is treated as in the compressor patch \, multiplying each channel amplitude by one over its modulus (but limited by the "squelch" parameter.) It is then multiplied by the modulus of the channel amplitude for the control source (which is Fourier analyzed in parallel with the filter input.);
#X text 148 440 multiply the two amplitude;
#X text 146 457 factors (for compression;
#X text 148 473 and to apply new timbre);
#X obj 110 314 rsqrt~;
#X obj 298 374 sqrt~;
#X obj 143 342 r \$0squelch;
#X msg 356 552 \; window-size 1024 \; \$1squelch 30;
#X obj 356 525 \$0;
#X connect 0 0 11 1;
#X connect 1 0 11 0;
#X connect 2 0 4 1;
#X connect 3 0 4 0;
#X connect 4 0 42 0;
#X connect 5 0 7 0;
#X connect 6 0 5 0;
#X connect 7 0 13 0;
#X connect 7 0 13 1;
#X connect 7 0 1 0;
#X connect 7 1 9 0;
#X connect 7 1 9 1;
#X connect 7 1 0 0;
#X connect 8 0 12 0;
#X connect 9 0 14 1;
#X connect 10 0 3 0;
#X connect 10 0 3 1;
#X connect 10 1 2 0;
#X connect 10 1 2 1;
#X connect 11 0 8 0;
#X connect 13 0 14 0;
#X connect 14 0 22 0;
#X connect 16 0 23 0;
#X connect 18 0 16 0;
#X connect 19 0 5 1;
#X connect 20 0 45 0;
#X connect 21 0 18 2;
#X connect 22 0 41 0;
#X connect 23 0 0 1;
#X connect 23 0 1 1;
#X connect 24 0 8 1;
#X connect 25 0 10 0;
#X connect 26 0 25 0;
#X connect 27 0 25 1;
#X connect 41 0 18 0;
#X connect 42 0 16 1;
#X connect 43 0 21 0;
#X connect 45 0 44 0;
#X restore 140 192 pd fft-analysis;
#N canvas 166 260 567 523 hann-window 0;
#N canvas 0 0 450 300 (subpatch) 0;
#X array \$0-hann 1024 float 0;
#X coords 0 1 1023 0 300 100 1;
#X restore 110 394 graph;
#X obj 327 184 osc~;
#X obj 327 209 *~ -0.5;
#X obj 327 233 +~ 0.5;
#X obj 310 276 tabwrite~ \$0-hann;
#X obj 86 113 r window-size;
#X obj 157 237 /;
#X obj 175 205 samplerate~;
#X obj 157 315 s window-sec;
#X obj 67 251 swap;
#X obj 67 275 /;
#X obj 67 299 s window-hz;
#X obj 168 265 * 1000;
#X obj 168 292 s window-msec;
#X obj 86 148 t f b f;
#X msg 175 155 resize \$1;
#X obj 175 179 s \$0-hann;
#X obj 279 122 r window-hz;
#X msg 352 154 0;
#X obj 279 150 t f b;
#X text 56 20 calculate Hann window table (variable window size) and constants window-hz (fundamental frequency of analysis) \, window-sec and window-msec (analysis window size in seconds and msec)., f 56;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 5 0 14 0;
#X connect 6 0 8 0;
#X connect 6 0 12 0;
#X connect 7 0 6 1;
#X connect 7 0 9 1;
#X connect 9 0 10 0;
#X connect 9 1 10 1;
#X connect 10 0 11 0;
#X connect 12 0 13 0;
#X connect 14 0 6 0;
#X connect 14 0 9 0;
#X connect 14 1 7 0;
#X connect 14 2 15 0;
#X connect 15 0 16 0;
#X connect 17 0 19 0;
#X connect 18 0 1 1;
#X connect 19 0 1 0;
#X connect 19 1 4 0;
#X connect 19 1 18 0;
#X restore 286 213 pd hann-window;
#X obj 38 77 inlet~;
#X obj 288 28 inlet~;
#X obj 140 217 outlet~;
#X obj 122 74 route squelch;
#X obj 122 99 s \$0squelch;
#X text 68 13 taken from pd examples;
#X connect 0 0 4 0;
#X connect 2 0 0 1;
#X connect 2 1 5 0;
#X connect 3 0 0 0;
#X connect 5 0 6 0;
